#!/usr/bin/env python
# _*_ coding: UTF-8 _*_

"""
reference website:https://www.cnblogs.com/dyfblog/p/5880728.html
正则表达式（regular expression）,re模块使用介绍：
1.what:正则表达式是一个很强大的字符串处理工具，几乎任何关于字符串的操作都可以使用正则表达式来完成
2.python中的正则表达式大致分为以下几个部分：（1）元字符；（2）模式；（3）函数；（4）re内置对象用法；（5）分组用法；（6）环视用法
（1）元字符
<1> .                     匹配任意字符（不包括换行符）
<2> ^                     匹配开始位置，多行模式下匹配每一行的开始
<3> $                     匹配结束位置，多行模式下匹配每一行的结束
<4> *                     匹配前一个元字符0到多次
<5> +                     匹配前一个元字符1到多次
<6> ?                     匹配前一个元字符0到1次
<7> {m,n}                 匹配前一个元字符m到n次
<8> \\                    转义字符，跟在其后的字符将失去作为特殊元字符的含义，例如\\.只能匹配.，不能再匹配任意字符
<9> []                    字符集，一个字符的集合，可匹配其中任意一个字符
<10> |(竖直线)            逻辑表达式 或 ，比如 a|b 代表可匹配 a 或者 b
<11> (...)                分组，默认为捕获，即被分组的内容可以被单独取出，默认每个分组有个索引，从 1 开始，按照"("的顺序决定索引值
<12> (?iLmsux)            分组中可以设置模式，iLmsux之中的每个字符代表一个模式,用法参见 模式 I
<13> (?:...)              分组的不捕获模式，计算索引时会跳过这个分组
<14> (?P<name>...)        分组的命名模式，取此分组中的内容时可以使用索引也可以使用name
<15> (?P=name)            分组的引用模式，可在同一个正则表达式用引用前面命名过的正则
<16> (?#...)              注释，不影响正则表达式其它部分,用法参见 模式 I
<17> (?=...)              顺序肯定环视，表示所在位置右侧能够匹配括号内正则
<18> (?!...)              顺序否定环视，表示所在位置右侧不能匹配括号内正则
<19> (?<=...)             逆序肯定环视，表示所在位置左侧能够匹配括号内正则
<20> (?<!...)             逆序否定环视，表示所在位置左侧不能匹配括号内正则
<21> (?(id/name)yes|no)   若前面指定id或name的分区匹配成功则执行yes处的正则，否则执行no处的正则
<22> \number              匹配和前面索引为number的分组捕获到的内容一样的字符串
<23> \A                   匹配字符串开始位置，忽略多行模式
<24> \Z                   匹配字符串结束位置，忽略多行模式
<25> \b                   匹配位于单词开始或结束位置的空字符串
<26> \B                   匹配不位于单词开始或结束位置的空字符串
<27> \d                   匹配一个数字， 相当于 [0-9]
<28> \D                   匹配非数字,相当于 [^0-9]
<29> \s                   匹配任意空白字符， 相当于 [ \t\n\r\f\v]
<30> \S                   匹配非空白字符，相当于 [^ \t\n\r\f\v]
<31> \w                   匹配数字、字母、下划线中任意一个字符， 相当于 [a-z A-Z 0-9_]
<32> \W                   匹配非数字、字母、下划线中的任意字符，相当于 [^a-z A-Z 0-9_]
"""
import re


class StringCheck(object):
    """
    实现各种字符串的格式检验
    """
    def __init__(self, log=None):
        self.log = log

    def is_uint(self, string):
        """
        判断字符串是否是无符号整数
        :param string:
        :return:
        """
        re_str = '^[0-9]*$'
        value = re.compile(re_str)
        result = value.match(string)
        if result:
            print 'float'
            return True
        else:
            print 'not float'
            return False






if __name__ == '__main__':
    string = raw_input('input:')
    stringcheck = StringCheck()
    stringcheck.is_uint(string)
